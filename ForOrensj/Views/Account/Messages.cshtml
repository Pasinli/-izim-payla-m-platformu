@using PagedList;
@using PagedList.Mvc;
@model IPagedList<ForOrensj.Models.DTO.MessageVM>
@{
    ViewBag.Title = "Messages";
    Layout = "~/Views/Shared/Layout.cshtml";
}


@section Msg{


    <link href="~/Content/css/MessageBox.css" rel="stylesheet" />
    <script>
        !function (a, b) { function g(b, c) { this.$element = a(b), this.settings = a.extend({}, f, c), this.init() } var e = "floatlabel", f = { slideInput: !0, labelStartTop: "20px", labelEndTop: "10px", paddingOffset: "10px", transitionDuration: .3, transitionEasing: "ease-in-out", labelClass: "", typeMatches: /text|password|email|number|search|url/ }; g.prototype = { init: function () { var a = this, c = this.settings, d = c.transitionDuration, e = c.transitionEasing, f = this.$element, g = { "-webkit-transition": "all " + d + "s " + e, "-moz-transition": "all " + d + "s " + e, "-o-transition": "all " + d + "s " + e, "-ms-transition": "all " + d + "s " + e, transition: "all " + d + "s " + e }; if ("INPUT" === f.prop("tagName").toUpperCase() && c.typeMatches.test(f.attr("type"))) { var h = f.attr("id"); h || (h = Math.floor(100 * Math.random()) + 1, f.attr("id", h)); var i = f.attr("placeholder"), j = f.data("label"), k = f.data("class"); k || (k = ""), i && "" !== i || (i = "You forgot to add placeholder attribute!"), j && "" !== j || (j = i), this.inputPaddingTop = parseFloat(f.css("padding-top")) + parseFloat(c.paddingOffset), f.wrap('<div class="floatlabel-wrapper" style="position:relative"></div>'), f.before('<label for="' + h + '" class="label-floatlabel ' + c.labelClass + " " + k + '">' + j + "</label>"), this.$label = f.prev("label"), this.$label.css({ position: "absolute", top: c.labelStartTop, left: f.css("padding-left"), display: "none", "-moz-opacity": "0", "-khtml-opacity": "0", "-webkit-opacity": "0", opacity: "0" }), c.slideInput || f.css({ "padding-top": this.inputPaddingTop }), f.on("keyup blur change", function (b) { a.checkValue(b) }), b.setTimeout(function () { a.$label.css(g), a.$element.css(g) }, 100), this.checkValue() } }, checkValue: function (a) { if (a) { var b = a.keyCode || a.which; if (9 === b) return } var c = this.$element, d = c.data("flout"); "" !== c.val() && c.data("flout", "1"), "" === c.val() && c.data("flout", "0"), "1" === c.data("flout") && "1" !== d && this.showLabel(), "0" === c.data("flout") && "0" !== d && this.hideLabel() }, showLabel: function () { var a = this; a.$label.css({ display: "block" }), b.setTimeout(function () { a.$label.css({ top: a.settings.labelEndTop, "-moz-opacity": "1", "-khtml-opacity": "1", "-webkit-opacity": "1", opacity: "1" }), a.settings.slideInput && a.$element.css({ "padding-top": a.inputPaddingTop }), a.$element.addClass("active-floatlabel") }, 50) }, hideLabel: function () { var a = this; a.$label.css({ top: a.settings.labelStartTop, "-moz-opacity": "0", "-khtml-opacity": "0", "-webkit-opacity": "0", opacity: "0" }), a.settings.slideInput && a.$element.css({ "padding-top": parseFloat(a.inputPaddingTop) - parseFloat(this.settings.paddingOffset) }), a.$element.removeClass("active-floatlabel"), b.setTimeout(function () { a.$label.css({ display: "none" }) }, 1e3 * a.settings.transitionDuration) } }, a.fn[e] = function (b) { return this.each(function () { a.data(this, "plugin_" + e) || a.data(this, "plugin_" + e, new g(this, b)) }) } }(jQuery, window, document);


        $(document).ready(function () {
            $('.form-control').floatlabel({
                labelClass: 'float-label',
                labelEndTop: 5
            });
        });

    </script>

}
    <div class="row">
        <div class="col-md-1" style="margin-left:40%">
            @Html.ActionLink("Mesaj Yolla", "SendMessage", "Account", new { area = "" }, new { @class = "btn btn-danger"  })
        </div>
    </div>
<div class="tab-content">
    <div class="tab-pane active" id="inbox">

        <div class="container">
            <div class="content-container clearfix">
                <div class="col-md-12">
                    <h1 class="content-title">Gelen Mesajlar</h1>


                    <ul class="mail-list">
                        @foreach (var item in Model)
                        {
                            <li>
                                <a href="@Url.Action("ShowMessage","Account",new {id=item.Id,area="" })">
                                    <span class="mail-sender">Gönderen: @item.Sender</span>
                                    <span class="mail-subject">@item.Text.Substring(0, 5)</span>
                                    <span class="mail-message-preview">@item.Text.Substring(0, item.Text.Length % 60)</span>
                                </a>
                            </li>
                        }



                    </ul>
                </div>
            </div>
        </div>

    </div>

    <center>
        <div class="pagedList">
            @Html.PagedListPager(Model, page => Url.Action("Messages", new { page }), PagedListRenderOptions.TwitterBootstrapPager)
        </div>
    </center>




